package src {	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;		public class Main extends Sprite 	{		public static var tank:Tank;		//private var tank:Tank;		private var ball:Ball;		private var balls:Vector.<Ball>;		private var enemies:Array;		private var chests:Vector.<Chest>; 						public function Main():void 		{			if (stage) init();			else addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event = null):void 		{			removeEventListener(Event.ADDED_TO_STAGE, init);			// entry point			tank = new Tank();			enemies = new Array();			for (var i:int = 0; i < 3; i++)			{				var enemy:EnemyTank = new EnemyTank();				enemies.push(enemy);				addChild(enemy);				enemy.x = Math.random()*stage.stageWidth;				enemy.y = Math.random()*stage.stageHeight;				enemy.scaleX = enemy.scaleY = 0.4;				enemy.addEventListener("onShoot", createBullet);			}						this.addChild(tank);						tank.x = 100; //positie jou tank			tank.y = 300; //positie jou tank			tank.scaleX = tank.scaleY = 0.4;			tank.addEventListener("onShoot", createBullet);						balls = new Vector.<Ball>();						chests = new Vector.<Chest>();						createChests();						this.addEventListener(Event.ENTER_FRAME, loop);		}				private function createChests():void		{			for (var i:int = 0; i < 5; i++)			{				var chest:Chest = new Chest();				chests.push(chest);				addChild(chest);				chest.x = Math.random() * stage.stageWidth;				chest.y = Math.random() * stage.stageHeight;				chest.scaleX = chest.scaleY = 0.5;			}		}				private function loop(e:Event):void		{			if (tank != null) {								for (var i:int = 0; i < balls.length; i++)				{										var toRemove:Boolean = false;										balls[i].update();										for (var j:int = 0; j < chests.length; j++)					{						if (chests[j].hitTestPoint(balls[i].x, balls[i].y, true))						{							toRemove = true;														chests[j].lives--;							if (chests[j].lives <= 0) 							{								removeChild(chests[j]);								chests.splice(j, 1);								trace("Object geraakt");							}						}					} // dze													//*					for (var k:int = 0; k < enemies.length; k++)					{						if (enemies[k].hitTestPoint(balls[i].x, balls[i].y, true)) 						{ 							toRemove = true;							enemies[k].lives--;							trace("Hun tank " + (k + 1) + ": " + enemies[k].lives);							if (enemies[k].lives <= 0)							{								enemies[k].destroy();								removeChild(enemies[k]);								enemies.splice(k, 1);								trace("Hun tank geraakt");							}						}					}										if (tank.hitTestPoint(balls[i].x, balls[i].y, true))					{						toRemove = true;						tank.lives--;						trace("Mijn tank: " + tank.lives);						if (tank.lives <= 0) 						{							tank.destroy();							removeChild(tank);							tank = null;							trace("Eigen tank geraakt");							break;						}					}										//					if (balls[i].x > stage.stageWidth || balls[i].x < 0 || balls[i].y > stage.stageHeight || balls[i].y < 0)					{						toRemove = true;					}										if (toRemove)					{						removeChild(balls[i]);						balls.splice(i, 1);					}				}			}				}		private function createBullet(e:ShootEvent):void		{						if (tank != null) {				var r:Number = e.shooter.turretAngle + e.shooter.rotation;				var tPos:Point = new Point(e.shooter.x, e.shooter.y);				var b:Ball = new Ball(r, tPos);				balls.push(b);				addChild(b);				//b.scaleX = b.scaleY = 0.8; // als laatst toegevoegd			}		}	}}